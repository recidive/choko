#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var Application = require('../lib/application');
var install = require('../lib/install');
var lodash = require('lodash');
var colors = require('colors');
var chokoVersion = require('../package').version;

var DEFAULT_PATH = '.';
var DEFAULT_PORT = process.env.PORT || 3000;

/**
 * Returns the normalized path where all the apps reside.
 */
function appPath(destination) {
  // Default destination.
  if (!lodash.isString(destination)) {
    destination = DEFAULT_PATH;
  }
  return path.normalize(destination);
}

/**
 * Append in a path the applications.json file.
 */
function appSettingsPath(dir) {
  return path.join(dir, 'settings.json');
}

/**
 * Starts the application in the specified destination path.
 */
function start(destination, prg) {
  var dir = appPath(destination);

  if (!isInstalled(dir)) {

    // No destination is defined, so "applications" dir should be default.
    var dirMode = DEFAULT_PATH;
    if (destination != null) {
      dirMode = 'specified';
    }

    console.log(getLogo().green);

    return program.confirm('No application found on ' + dirMode + ' folder.\n:: Create a new application on "' + path.resolve(dir) + '" ? ', function(ok) {
      if (!ok) {
        return process.stdin.destroy();
      }

      install(dir, prg);
    });
  }

  var app = new Application(dir);
  app.start(prg.port);
}

/**
 * Define if Choko is installed.
 */
function isInstalled(dir) {
  // Running from the "applications" directory.
  if (dir == null && fs.existsSync(appSettingsPath(appPath()))) {
    return true;
  }

  // Specified directory.
  return fs.existsSync(appSettingsPath(dir));
}

/**
 * Get Choko logo ASCII Art.
 */
function getLogo() {
  return fs.readFileSync(path.resolve(__dirname + '/../lib/logo.txt'), 'utf-8');
}

program
  .command('*')
  .version(chokoVersion)
  .usage('[options] [dir]')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program
  .command('start')
  .usage('[options] [dir]')
  .description('Start a Choko application.')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program.parse(process.argv);
