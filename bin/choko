#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var path = require('path');
var util = require('util');
var program = require('commander');
var Application = require('../lib/application');
var mkdirp = require('mkdirp');
var lodash = require('lodash');

var DEFAULT_PATH = '.';
var DEFAULT_PORT = process.env.PORT || 3000;

/**
 * Returns the normalized path where all the apps reside.
 */
var appPath = function (destination) {
  // Default destination.
  if (!lodash.isString(destination)) {
    destination = DEFAULT_PATH;
  }
  return path.normalize(destination);
}

/**
 * Append in a path the applications.json file.
 */
var appSettingsPath = function (dir) {
  return path.join(dir, 'settings.json');
}

/**
 * Starts the application in the specified destination path.
 */
var start = function(destination, prg, callback) {
  var dir = appPath(destination);

  if (!isInstalled(dir)) {
    return install(dir, prg);
  }

  var app = new Application(dir);
  app.start(prg.port, function () {
    if (lodash.isFunction(callback)) {
      callback(dir);
    }
  });
};

/**
 * Define if Choko is installed.
 */
var isInstalled = function(dir) {
  // Running from the "applications" directory.
  if (dir == null && fs.existsSync(appSettingsPath(appPath()))) {
    return true;
  }

  // Specified directory.
  return fs.existsSync(appSettingsPath(dir));
}

/**
 * Prepare a structure of directories and files, to run the installer.
 */
var install = function(destination, prg, callback) {
  var dir = appPath(destination);

  if (isInstalled(dir)) {
    return process.stdin.destroy();
  }

  // No destination is defined, so "applications" dir should be default.
  var dirMode = DEFAULT_PATH;
  if (destination != null) {
    dirMode = 'specified';
  }

  program.confirm('No application found on ' + dirMode + ' folder, create a new application on "' + dir + '" path? ', function(ok) {
    if (!ok) {
      return process.stdin.destroy();
    }

    // Create application directories if they don't exist.
    var folders = [
      dir,
      path.join(dir, '/public'),
      path.join(dir, '/extensions')
    ];
    folders.forEach(function(folder) {
      if (!fs.existsSync(folder)) {
        fs.mkdirSync(folder);
      }
    });

    var initialSettings = {
      application: {
        name: 'Install Choko'
      },
      extensions: {}
    };
    fs.writeFileSync(path.join(dir, '/settings.json'), JSON.stringify(initialSettings, null, '  '), {flag: 'w'});

    start(dir, prg, function(dir) {
      util.log('Navigate to http://localhost:' + prg.port + '/install' + ' to create your first application.');
    });

  });
};

program
  .command('*')
  .version('0.0.5')
  .usage('[options] [dir]')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program
  .command('start')
  .usage('[options] [dir]')
  .description('Start a Choko application.')
  .option('-p, --port <number>', 'start application at specified port', parseInt, DEFAULT_PORT)
  .action(function () {
    var args = Array.prototype.slice.call(arguments);
    if (!lodash.isString(args[0])) {
      args.unshift(DEFAULT_PATH);
    }
    start.apply(this, args);
  });

program.parse(process.argv);
